[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dfs-prophet"
version = "0.1.0"
description = "AI-Powered Daily Fantasy Sports API with Vector Search & Binary Quantization"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Pavan Vemuri", email = "vemuripavan@gmail.com"}
]
keywords = [
    "dfs", "fantasy-sports", "ai", "machine-learning", "vector-search", 
    "qdrant", "fastapi", "binary-quantization", "nfl", "sports-analytics"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Framework :: FastAPI",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "qdrant-client>=1.7.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "nfl-data-py>=0.3.0",
    "sentence-transformers>=2.2.0",
    "scikit-learn>=1.3.0",
    "httpx>=0.25.0",
    "psutil>=5.9.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.0",
    "structlog>=23.2.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "mypy>=1.6.0",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",
    "coverage>=7.3.0",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.25.0",
    "faker>=20.1.0",
]
prod = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk>=1.38.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]

[project.urls]
Homepage = "https://github.com/iampique/dfs-prophet"
Repository = "https://github.com/iampique/dfs-prophet.git"
"Bug Tracker" = "https://github.com/iampique/dfs-prophet/issues"
"Discussions" = "https://github.com/iampique/dfs-prophet/discussions"
Changelog = "https://github.com/iampique/dfs-prophet/blob/main/CHANGELOG.md"

[project.scripts]
dfs-prophet = "src.dfs_prophet.cli:main"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["dfs_prophet"]
known_third_party = ["fastapi", "pydantic", "qdrant_client", "sentence_transformers"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "nfl_data_py.*",
    "sentence_transformers.*",
    "qdrant_client.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest-benchmark]
min_rounds = 5
warmup = true
disable_gc = true
timer = "time.perf_counter"

[tool.structlog]
processors = [
    "structlog.stdlib.filter_by_level",
    "structlog.stdlib.add_logger_name",
    "structlog.stdlib.add_log_level",
    "structlog.stdlib.PositionalArgumentsFormatter",
    "structlog.processors.TimeStamper",
    "structlog.processors.StackInfoRenderer",
    "structlog.processors.format_exc_info",
    "structlog.processors.UnicodeDecoder",
    "structlog.processors.JSONRenderer",
]
context_class = "dict"
logger_factory = "structlog.stdlib.LoggerFactory"
wrapper_class = "structlog.stdlib.BoundLogger"
cache_logger_on_first_use = true



