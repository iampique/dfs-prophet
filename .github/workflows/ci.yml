name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  QDRANT_VERSION: "latest"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    services:
      qdrant:
        image: qdrant/qdrant:${{ env.QDRANT_VERSION }}
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: latest

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .venv
          ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run linting
      run: |
        source .venv/bin/activate
        black --check src/ tests/
        isort --check-only src/ tests/
        ruff check src/ tests/
        mypy src/

    - name: Run security checks
      run: |
        source .venv/bin/activate
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest --cov=src/dfs_prophet --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      qdrant:
        image: qdrant/qdrant:${{ env.QDRANT_VERSION }}
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: latest

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Generate test data
      run: |
        source .venv/bin/activate
        python scripts/generate_synthetic_data.py

    - name: Run performance benchmarks
      run: |
        source .venv/bin/activate
        pytest tests/performance/ --benchmark-only

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: .pytest_cache/

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker image
      run: |
        docker build -t dfs-prophet:test .
        docker run --rm dfs-prophet:test python -c "import dfs_prophet; print('Import successful')"

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/dfs-prophet:latest .
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/dfs-prophet:${{ github.sha }} .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/dfs-prophet:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/dfs-prophet:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment logic here
        # Example: kubectl apply, terraform apply, etc.

  release:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: release

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: latest

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Generate changelog
      run: |
        source .venv/bin/activate
        # Add changelog generation logic here

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for commit ${{ github.sha }}
          
          ## Changes
          - Automated release
          
          ## Installation
          ```bash
          pip install dfs-prophet==${{ github.run_number }}
          ```
        draft: false
        prerelease: false
